/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'jacoco'


// In this section you declare where to find the dependencies of your project
repositories {
    maven {
        url "https://maven.csse.rose-hulman.edu/artifactory/libs-release"
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.1'
	compile group: 'commons-io', name: 'commons-io', version: '2.0.1'
	
	compile(group: 'edu.rosehulman.csse477.gilderjw-decramrj', name: 'CSSE477_Web_Server', version: '1.2.0-m3')
}


mainClassName='app.SimpleWebServer'

if (System.getenv("CI_BUILD_TAG") != null) {
    version = "${System.getenv("CI_BUILD_TAG")}"
} else {
    version = '1.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


// Code coverage analyzer
jacoco {
	toolVersion = "0.7.+"
}

jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}

applicationDistribution.from("${projectDir}/web") {
	into "web"
}

applicationDistribution.from("${projectDir}/scripts") {
	into "scripts"
}


applicationDistribution.from("${projectDir}/application.properties") {
	into "."
}



test {
    testLogging.showStandardStreams = true
    environment "CI_VERSION", version
	jacoco {
		append = false
	}
}

test.finalizedBy(jacocoTestReport)


task codeCoverageInfo (dependsOn: jacocoTestReport) {
	ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
	doLast {
		println "Transforming source file."
		
		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://xml.org/sax/features/namespaces", false)
				  
		def reportNode = parser.parse(srcFile)
		reportNode.children().each {
			if(it.name() == 'counter') {
				String type = it.@type
				float missed = it.@missed as float
				float covered = it.@covered as float
				float percentage = covered / (missed + covered) * 100
				println "Code Coverage[$type]: $percentage%"
			}
		}
	}
}
jacocoTestReport.finalizedBy(codeCoverageInfo)

jar {
	manifest {
		attributes "Implementation-Title": "RJ and Jim's 477 Web Server Default Plugin",
				"Implementation-Version": "${version}"
	}
}

